// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Coffee {
  id          String     @id @default(uuid())
  name        String
  description String
  price       Decimal    @db.Decimal(10, 2)
  imageUrl    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relacionamentos
  tags        CoffeeTag[]
  cartItems   CartItem[] 
}

model Tag {
  id        String      @id @default(uuid())
  name      String      @unique
  type      typeCoffee  @default(tradicional)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  // Relacionamentos
  coffees   CoffeeTag[]
}

enum typeCoffee {
  tradicional
  com_leite
  gelado
}

model CoffeeTag {
  coffeeId  String
  tagId     String

  // Relacionamentos
  coffee    Coffee @relation(fields: [coffeeId], references: [id])
  tag       Tag    @relation(fields: [tagId], references: [id])

   @@id([coffeeId, tagId])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String?    // Opcional para usuários não autenticados
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Data e hora em que foi realizado a compra
  data_time_completed DateTime?    @map("data_time_completed") @db.Timestamptz()

  // Enum
  status              CartStatus   @default(AguardandoPagamento)
  status_payment      PaymentStatus @default(Pendente)
  
  // Relacionamentos 
  items     CartItem[]
  order                     Order?  
}

enum CartStatus {
  Abandonado
  AguardandoPagamento
  Finalizado
}

enum PaymentStatus {
  Aprovado
  Analise
  Pendente
  Cancelado
}

model CartItem {
  id         String   @id @default(uuid())
  quantity   Int       @default(1) @db.SmallInt
  unitPrice  Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  cart_id    String
  coffee_id  String
  
  // Relacionamentos aqui
  cart       Cart      @relation(fields: [cart_id], references: [id])
  coffee     Coffee    @relation(fields: [coffee_id], references: [id])
}

enum OrderStatus {
  PROCESSANDO
  EM_TRANSITO
  ENTREGUE
  CANCELADO
  AGUARDANDO_PAGAMENTO // Pode ser útil se o status do pedido não for diretamente vinculado ao PaymentStatus
}

model Order {
  id            String      @id @default(uuid())
  cartId        String      @unique // Garante a relação um-para-um com Cart
  cart          Cart        @relation(fields: [cartId], references: [id])
  totalItems    Int
  shippingFee   Decimal     @db.Decimal(10, 2)
  totalAmount   Decimal     @db.Decimal(10, 2)
  status        OrderStatus @default(PROCESSANDO) // Novo campo de status com valor padrão
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

